// alu_tester_auto is an automated tester to run test cases 
// alu_tester_auto starts cycling through the states when start input signal is put to HIGH 
// alu_statement_tester is instantiated with the parameters input_a, input_b, opcode and the expected output value for each test case
// state transitions for alu_statement_tester occur when the associated statement test case fsm's DONE signal is HIGH
// if the associated statement test case's fsm terminated in the ERROR_2 state, alu_tester_auto will be stuck at associated statement test case

module alu_auto_tester (
    input clk,  // clock : connect to regular 50MHz clock
    input rst,  // reset
    input start,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6]
  ) {
    
        enum AutoStates 
                    {
                        STANDBY,
                        TEST_0, 
                        TEST_1, 
                        TEST_2, 
                        TEST_3, 
                        TEST_4, 
                        TEST_5, 
                        TEST_6, 
                        TEST_7, 
                        TEST_8, 
                        TEST_9, 
                        TEST_10, 
                        TEST_11, 
                        TEST_12, 
                        TEST_13, 
                        TEST_14, 
                        TEST_15, 
                        TEST_16, 
                        TEST_17, 
                        TEST_18, 
                        TEST_19, 
                        TEST_20, 
                        TEST_21, 
                        TEST_22, 
                        TEST_23, 
                        TEST_24, 
                        TEST_25, 
                        TEST_26, 
                        TEST_27, 
                        TEST_28, 
                        TEST_29, 
                        TEST_30, 
                        TEST_31, 
                        TEST_32, 
                        TEST_33
                   }
    
  
      .clk(clk) {
            .rst(rst) {
              dff states[$width(AutoStates)](#INIT(AutoStates.STANDBY))
            
              // INSERT GENERATED fsm & alu_statement_tester HERE  
              alu_statement_tester test_0 (#INPUT_A(16habcd), #INPUT_B(16hef42), #OPCODE(6b000000), #EXPECTED(16h9b0f))
              alu_statement_tester test_1 (#INPUT_A(16h0168), #INPUT_B(16h0168), #OPCODE(6b000000), #EXPECTED(16h02d0))
              alu_statement_tester test_2 (#INPUT_A(16h0168), #INPUT_B(16h0000), #OPCODE(6b000001), #EXPECTED(16h0168))
              alu_statement_tester test_3 (#INPUT_A(16habcd), #INPUT_B(16habcd), #OPCODE(6b000001), #EXPECTED(16h0000))
              alu_statement_tester test_4 (#INPUT_A(16h0000), #INPUT_B(16hffff), #OPCODE(6b011000), #EXPECTED(16h0000))
              alu_statement_tester test_5 (#INPUT_A(16hffff), #INPUT_B(16hffff), #OPCODE(6b011000), #EXPECTED(16hffff))
              alu_statement_tester test_6 (#INPUT_A(16h0000), #INPUT_B(16hffff), #OPCODE(6b011110), #EXPECTED(16hffff))
              alu_statement_tester test_7 (#INPUT_A(16h0001), #INPUT_B(16h0010), #OPCODE(6b011110), #EXPECTED(16h0011))
              alu_statement_tester test_8 (#INPUT_A(16hffff), #INPUT_B(16hffff), #OPCODE(6b010110), #EXPECTED(16h0000))
              alu_statement_tester test_9 (#INPUT_A(16hffff), #INPUT_B(16h0000), #OPCODE(6b010110), #EXPECTED(16hffff))
              alu_statement_tester test_10 (#INPUT_A(16h2121), #INPUT_B(16h4242), #OPCODE(6b011010), #EXPECTED(16h2121))
              alu_statement_tester test_11 (#INPUT_A(16h4242), #INPUT_B(16h4242), #OPCODE(6b011010), #EXPECTED(16h4242))
              alu_statement_tester test_12 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100000), #EXPECTED(16hFFFE))
              alu_statement_tester test_13 (#INPUT_A(16hffff), #INPUT_B(16h0008), #OPCODE(6b100000), #EXPECTED(16hFF00))
              alu_statement_tester test_14 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100001), #EXPECTED(16h7FFF))
              alu_statement_tester test_15 (#INPUT_A(16hffff), #INPUT_B(16h0008), #OPCODE(6b100001), #EXPECTED(16h00FF))
              alu_statement_tester test_16 (#INPUT_A(16hffff), #INPUT_B(16h0001), #OPCODE(6b100011), #EXPECTED(16hFFFF))
              alu_statement_tester test_17 (#INPUT_A(16h3fff), #INPUT_B(16h0008), #OPCODE(6b100011), #EXPECTED(16h003F))
              alu_statement_tester test_18 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b000010), #EXPECTED(16h0001))
              alu_statement_tester test_19 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b000010), #EXPECTED(16h0000))
              alu_statement_tester test_20 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b110011), #EXPECTED(16h0001))
              alu_statement_tester test_21 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b110011), #EXPECTED(16h0000))
              alu_statement_tester test_22 (#INPUT_A(16h7fff), #INPUT_B(16h7fff), #OPCODE(6b110101), #EXPECTED(16h0000))
              alu_statement_tester test_23 (#INPUT_A(16h0000), #INPUT_B(16h7fff), #OPCODE(6b110101), #EXPECTED(16h0001))
              alu_statement_tester test_24 (#INPUT_A(16h7fff), #INPUT_B(16h0000), #OPCODE(6b110111), #EXPECTED(16h0000))
              alu_statement_tester test_25 (#INPUT_A(16h2121), #INPUT_B(16h2121), #OPCODE(6b110111), #EXPECTED(16h0001))
              alu_statement_tester test_26 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b010001), #EXPECTED(16hd51f))
              alu_statement_tester test_27 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b010001), #EXPECTED(16hffff))
              alu_statement_tester test_28 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b011111), #EXPECTED(16h500f))
              alu_statement_tester test_29 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b011111), #EXPECTED(16h0000))
              alu_statement_tester test_30 (#INPUT_A(16h2af0), #INPUT_B(16hafe0), #OPCODE(6b010111), #EXPECTED(16h7aef))
              alu_statement_tester test_31 (#INPUT_A(16hff00), #INPUT_B(16h00ff), #OPCODE(6b010111), #EXPECTED(16h0000))
              alu_statement_tester test_32 (#INPUT_A(16h001f), #INPUT_B(16h0015), #OPCODE(6b000111), #EXPECTED(16h000A))
              alu_statement_tester test_33 (#INPUT_A(16h002A), #INPUT_B(16h0000), #OPCODE(6b000111), #EXPECTED(16h002A))
              
              }
        }
    
      always {
        io_seg = 0
        io_sel = 0
        opcode_led = 0
        
        // SET ALL alu_statement_tester.start TO 0
        test_0.start = 0
        test_1.start = 0
        test_2.start = 0
        test_3.start = 0
        test_4.start = 0
        test_5.start = 0
        test_6.start = 0
        test_7.start = 0
        test_8.start = 0
        test_9.start = 0
        test_10.start = 0
        test_11.start = 0
        test_12.start = 0
        test_13.start = 0
        test_14.start = 0
        test_15.start = 0
        test_16.start = 0
        test_17.start = 0
        test_18.start = 0
        test_19.start = 0
        test_20.start = 0
        test_21.start = 0
        test_22.start = 0
        test_23.start = 0
        test_24.start = 0
        test_25.start = 0
        test_26.start = 0
        test_27.start = 0
        test_28.start = 0
        test_29.start = 0
        test_30.start = 0
        test_31.start = 0
        test_32.start = 0
        test_33.start = 0
    
        case (states.q){
          AutoStates.STANDBY:
            if(start)
              states.d = AutoStates.TEST_0
          
          // INSERT GENERATED autostate.TEST_n CASES HERE      
          AutoStates.TEST_0:
          		io_seg = test_0.io_seg
          		io_sel = test_0.io_sel
          		opcode_led = test_0.opcode_led
          		test_0.start = 1
          		if(test_0.done)
          			    states.d = AutoStates.TEST_1
          
          	AutoStates.TEST_1:
          		io_seg = test_1.io_seg
          		io_sel = test_1.io_sel
          		opcode_led = test_1.opcode_led
          		test_1.start = 1
          		if(test_1.done)
          			    states.d = AutoStates.TEST_2
          
          	AutoStates.TEST_2:
          		io_seg = test_2.io_seg
          		io_sel = test_2.io_sel
          		opcode_led = test_2.opcode_led
          		test_2.start = 1
          		if(test_2.done)
          			    states.d = AutoStates.TEST_3
          
          	AutoStates.TEST_3:
          		io_seg = test_3.io_seg
          		io_sel = test_3.io_sel
          		opcode_led = test_3.opcode_led
          		test_3.start = 1
          		if(test_3.done)
          			    states.d = AutoStates.TEST_4
          
          	AutoStates.TEST_4:
          		io_seg = test_4.io_seg
          		io_sel = test_4.io_sel
          		opcode_led = test_4.opcode_led
          		test_4.start = 1
          		if(test_4.done)
          			    states.d = AutoStates.TEST_5
          
          	AutoStates.TEST_5:
          		io_seg = test_5.io_seg
          		io_sel = test_5.io_sel
          		opcode_led = test_5.opcode_led
          		test_5.start = 1
          		if(test_5.done)
          			    states.d = AutoStates.TEST_6
          
          	AutoStates.TEST_6:
          		io_seg = test_6.io_seg
          		io_sel = test_6.io_sel
          		opcode_led = test_6.opcode_led
          		test_6.start = 1;
          		if(test_6.done)
          			    states.d = AutoStates.TEST_7
          
          	AutoStates.TEST_7:
          		io_seg = test_7.io_seg
          		io_sel = test_7.io_sel
          		opcode_led = test_7.opcode_led
          		test_7.start = 1
          		if(test_7.done)
          			    states.d = AutoStates.TEST_8
          
          	AutoStates.TEST_8:
          		io_seg = test_8.io_seg
          		io_sel = test_8.io_sel
          		opcode_led = test_8.opcode_led
          		test_8.start = 1
          		if(test_8.done)
          			    states.d = AutoStates.TEST_9
          
          	AutoStates.TEST_9:
          		io_seg = test_9.io_seg
          		io_sel = test_9.io_sel
          		opcode_led = test_9.opcode_led
          		test_9.start = 1
          		if(test_9.done)
          			    states.d = AutoStates.TEST_10
          
          	AutoStates.TEST_10:
          		io_seg = test_10.io_seg
          		io_sel = test_10.io_sel
          		opcode_led = test_10.opcode_led
          		test_10.start = 1
          		if(test_10.done)
          			    states.d = AutoStates.TEST_11
          
          	AutoStates.TEST_11:
          		io_seg = test_11.io_seg
          		io_sel = test_11.io_sel
          		opcode_led = test_11.opcode_led
          		test_11.start = 1
          		if(test_11.done)
          			    states.d = AutoStates.TEST_12
          
          	AutoStates.TEST_12:
          		io_seg = test_12.io_seg
          		io_sel = test_12.io_sel
          		opcode_led = test_12.opcode_led
          		test_12.start = 1
          		if(test_12.done)
          			    states.d = AutoStates.TEST_13
          
          	AutoStates.TEST_13:
          		io_seg = test_13.io_seg
          		io_sel = test_13.io_sel
          		opcode_led = test_13.opcode_led
          		test_13.start = 1
          		if(test_13.done)
          			    states.d = AutoStates.TEST_14
          
          	AutoStates.TEST_14:
          		io_seg = test_14.io_seg
          		io_sel = test_14.io_sel
          		opcode_led = test_14.opcode_led
          		test_14.start = 1
          		if(test_14.done)
          			    states.d = AutoStates.TEST_15
          
          	AutoStates.TEST_15:
          		io_seg = test_15.io_seg
          		io_sel = test_15.io_sel
          		opcode_led = test_15.opcode_led
          		test_15.start = 1
          		if(test_15.done)
          			    states.d = AutoStates.TEST_16
          
          	AutoStates.TEST_16:
          		io_seg = test_16.io_seg
          		io_sel = test_16.io_sel
          		opcode_led = test_16.opcode_led
          		test_16.start = 1
          		if(test_16.done)
          			    states.d = AutoStates.TEST_17
          
          	AutoStates.TEST_17:
          		io_seg = test_17.io_seg
          		io_sel = test_17.io_sel
          		opcode_led = test_17.opcode_led
          		test_17.start = 1
          		if(test_17.done)
          			    states.d = AutoStates.TEST_18
          
          	AutoStates.TEST_18:
          		io_seg = test_18.io_seg
          		io_sel = test_18.io_sel
          		opcode_led = test_18.opcode_led
          		test_18.start = 1
          		if(test_18.done)
          			    states.d = AutoStates.TEST_19
          
          	AutoStates.TEST_19:
          		io_seg = test_19.io_seg
          		io_sel = test_19.io_sel
          		opcode_led = test_19.opcode_led
          		test_19.start = 1
          		if(test_19.done)
          			    states.d = AutoStates.TEST_20
          
          	AutoStates.TEST_20:
          		io_seg = test_20.io_seg
          		io_sel = test_20.io_sel
          		opcode_led = test_20.opcode_led
          		test_20.start = 1
          		if(test_20.done)
          			    states.d = AutoStates.TEST_21
          
          	AutoStates.TEST_21:
          		io_seg = test_21.io_seg
          		io_sel = test_21.io_sel
          		opcode_led = test_21.opcode_led
          		test_21.start = 1
          		if(test_21.done)
          			    states.d = AutoStates.TEST_22
          
          	AutoStates.TEST_22:
          		io_seg = test_22.io_seg
          		io_sel = test_22.io_sel
          		opcode_led = test_22.opcode_led
          		test_22.start = 1
          		if(test_22.done)
          			    states.d = AutoStates.TEST_23
          
          	AutoStates.TEST_23:
          		io_seg = test_23.io_seg
          		io_sel = test_23.io_sel
          		opcode_led = test_23.opcode_led
          		test_23.start = 1
          		if(test_23.done)
          			    states.d = AutoStates.TEST_24
          
          	AutoStates.TEST_24:
          		io_seg = test_24.io_seg
          		io_sel = test_24.io_sel
          		opcode_led = test_24.opcode_led
          		test_24.start = 1
          		if(test_24.done)
          			    states.d = AutoStates.TEST_25
          
          	AutoStates.TEST_25:
          		io_seg = test_25.io_seg
          		io_sel = test_25.io_sel
          		opcode_led = test_25.opcode_led
          		test_25.start = 1
          		if(test_25.done)
          			    states.d = AutoStates.TEST_26
      
          	AutoStates.TEST_26:
          		io_seg = test_26.io_seg
          		io_sel = test_26.io_sel
          		opcode_led = test_26.opcode_led
          		test_26.start = 1
          		if(test_26.done)
          			    states.d = AutoStates.TEST_27
          
          	AutoStates.TEST_27:
          		io_seg = test_27.io_seg
          		io_sel = test_27.io_sel
          		opcode_led = test_27.opcode_led
          		test_27.start = 1
          		if(test_27.done)
          			    states.d = AutoStates.TEST_28
      
          	AutoStates.TEST_28:
          		io_seg = test_28.io_seg
          		io_sel = test_28.io_sel
          		opcode_led = test_28.opcode_led
          		test_28.start = 1
          		if(test_28.done)
          			    states.d = AutoStates.TEST_29
          
          	AutoStates.TEST_29:
          		io_seg = test_29.io_seg
          		io_sel = test_29.io_sel
          		opcode_led = test_29.opcode_led
          		test_29.start = 1
          		if(test_29.done)
          			    states.d = AutoStates.TEST_30
          
          	AutoStates.TEST_30:
          		io_seg = test_30.io_seg
          		io_sel = test_30.io_sel
          		opcode_led = test_30.opcode_led
          		test_30.start = 1
          		if(test_30.done)
          		    states.d = AutoStates.TEST_31
      
          	AutoStates.TEST_31:
          		io_seg = test_31.io_seg
          		io_sel = test_31.io_sel
          		opcode_led = test_31.opcode_led
          		test_31.start = 1
          		if(test_31.done)
          			    states.d = AutoStates.TEST_32
          
          	AutoStates.TEST_32:
          		io_seg = test_32.io_seg
          		io_sel = test_32.io_sel
          		opcode_led = test_32.opcode_led
          		test_32.start = 1
          		if(test_32.done)
          			    states.d = AutoStates.TEST_33
      
          	AutoStates.TEST_33:
          		io_seg = test_33.io_seg
          		io_sel = test_33.io_sel
          		opcode_led = test_33.opcode_led
          		test_33.start = 1
          		if(test_33.done)
          			     states.d = AutoStates.STANDBY
      } 
  }
}
