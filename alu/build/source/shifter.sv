/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [31:0] R_6d5fd968_i;
    logic [31:0] RR_6d5fd968_i;
    logic [31:0] R_118d3ca6_i;
    logic [31:0] RR_118d3ca6_i;
    logic [31:0] R_683b9a2d_i;
    logic [31:0] RR_683b9a2d_i;
    logic [31:0] M_mux_a_s0;
    logic [31:0][1:0] M_mux_a_in;
    logic [31:0] M_mux_a_out;
    
    genvar idx_0_1421775512;
    
    generate
        for (idx_0_1421775512 = 0; idx_0_1421775512 < 32; idx_0_1421775512 = idx_0_1421775512 + 1) begin: forLoop_idx_0_1421775512
            mux_2 mux_a (
                .s0(M_mux_a_s0[idx_0_1421775512]),
                .in(M_mux_a_in[idx_0_1421775512]),
                .out(M_mux_a_out[idx_0_1421775512])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux_shl_s0;
    logic [31:0][1:0] M_mux_shl_in;
    logic [31:0] M_mux_shl_out;
    
    genvar idx_0_1840356736;
    
    generate
        for (idx_0_1840356736 = 0; idx_0_1840356736 < 32; idx_0_1840356736 = idx_0_1840356736 + 1) begin: forLoop_idx_0_1840356736
            mux_2 mux_shl (
                .s0(M_mux_shl_s0[idx_0_1840356736]),
                .in(M_mux_shl_in[idx_0_1840356736]),
                .out(M_mux_shl_out[idx_0_1840356736])
            );
        end
    endgenerate
    
    
    logic M_mux_pad_s0;
    logic [1:0] M_mux_pad_in;
    logic M_mux_pad_out;
    
    mux_2 mux_pad (
        .s0(M_mux_pad_s0),
        .in(M_mux_pad_in),
        .out(M_mux_pad_out)
    );
    
    
    localparam _MP_SIZE_1924823330 = 6'h20;
    logic [31:0] M_first_bit_reverse_in;
    logic [31:0] M_first_bit_reverse_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_1924823330)
    ) first_bit_reverse (
        .in(M_first_bit_reverse_in),
        .reversed(M_first_bit_reverse_reversed)
    );
    
    
    localparam _MP_SIZE_390739751 = 6'h20;
    logic [31:0] M_second_bit_reverse_in;
    logic [31:0] M_second_bit_reverse_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_390739751)
    ) second_bit_reverse (
        .in(M_second_bit_reverse_in),
        .reversed(M_second_bit_reverse_reversed)
    );
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_2103897180 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_left_shifters_a;
    logic [4:0] M_left_shifters_shift;
    logic [4:0] M_left_shifters_pad;
    logic [4:0][31:0] M_left_shifters_out;
    
    genvar idx_0_2103897180;
    
    generate
        for (idx_0_2103897180 = 0; idx_0_2103897180 < 5; idx_0_2103897180 = idx_0_2103897180 + 1) begin: forLoop_idx_0_2103897180
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_2103897180[idx_0_2103897180])
            ) left_shifters (
                .a(M_left_shifters_a[idx_0_2103897180]),
                .shift(M_left_shifters_shift[idx_0_2103897180]),
                .pad(M_left_shifters_pad[idx_0_2103897180]),
                .out(M_left_shifters_out[idx_0_2103897180])
            );
        end
    endgenerate
    
    
    always @* begin
        shift = 1'h0;
        M_first_bit_reverse_in = a;
        for (RR_6d5fd968_i = 0; RR_6d5fd968_i < 6'h20; RR_6d5fd968_i = RR_6d5fd968_i + 1) begin
      R_6d5fd968_i = (0) + RR_6d5fd968_i * (1);
            M_mux_a_s0[R_6d5fd968_i] = alufn[1'h0];
            M_mux_a_in[R_6d5fd968_i] = {M_first_bit_reverse_reversed[R_6d5fd968_i], a[R_6d5fd968_i]};
        end
        M_mux_pad_s0 = alufn[1'h1];
        M_mux_pad_in = {a[5'h1f], 1'h0};
        for (RR_118d3ca6_i = 0; RR_118d3ca6_i < 3'h5; RR_118d3ca6_i = RR_118d3ca6_i + 1) begin
      R_118d3ca6_i = (0) + RR_118d3ca6_i * (1);
            if (R_118d3ca6_i == 1'h0) begin
                M_left_shifters_a[R_118d3ca6_i] = M_mux_a_out;
            end else begin
                M_left_shifters_a[R_118d3ca6_i] = M_left_shifters_out[R_118d3ca6_i - 1'h1];
            end
            M_left_shifters_shift[R_118d3ca6_i] = b[R_118d3ca6_i];
            M_left_shifters_pad[R_118d3ca6_i] = M_mux_pad_out;
        end
        M_second_bit_reverse_in = M_left_shifters_out[3'h4];
        for (RR_683b9a2d_i = 0; RR_683b9a2d_i < 6'h20; RR_683b9a2d_i = RR_683b9a2d_i + 1) begin
      R_683b9a2d_i = (0) + RR_683b9a2d_i * (1);
            M_mux_shl_s0[R_683b9a2d_i] = alufn[1'h0];
            M_mux_shl_in[R_683b9a2d_i] = {M_second_bit_reverse_reversed[R_683b9a2d_i], M_left_shifters_out[3'h4][R_683b9a2d_i]};
        end
        shift = M_mux_shl_out;
    end
    
    
endmodule