/*
    This file was generated automatically by Alchitry Labs 2.0.24-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift
    );
    logic [4:0] R_39a84507_i;
    logic [5:0] RR_39a84507_i;
    logic [2:0] R_38caf42b_i;
    logic [2:0] RR_38caf42b_i;
    logic [4:0] R_4ba91384_i;
    logic [5:0] RR_4ba91384_i;
    logic [31:0] M_mux_a_s0;
    logic [31:0][1:0] M_mux_a_in;
    logic [31:0] M_mux_a_out;
    
    genvar idx_0_482568364;
    
    generate
        for (idx_0_482568364 = 0; idx_0_482568364 < 32; idx_0_482568364 = idx_0_482568364 + 1) begin: forLoop_idx_0_482568364
            mux_2 mux_a (
                .s0(M_mux_a_s0[idx_0_482568364]),
                .in(M_mux_a_in[idx_0_482568364]),
                .out(M_mux_a_out[idx_0_482568364])
            );
        end
    endgenerate
    
    
    logic [31:0] M_mux_shl_s0;
    logic [31:0][1:0] M_mux_shl_in;
    logic [31:0] M_mux_shl_out;
    
    genvar idx_0_1260383245;
    
    generate
        for (idx_0_1260383245 = 0; idx_0_1260383245 < 32; idx_0_1260383245 = idx_0_1260383245 + 1) begin: forLoop_idx_0_1260383245
            mux_2 mux_shl (
                .s0(M_mux_shl_s0[idx_0_1260383245]),
                .in(M_mux_shl_in[idx_0_1260383245]),
                .out(M_mux_shl_out[idx_0_1260383245])
            );
        end
    endgenerate
    
    
    logic M_mux_pad_s0;
    logic [1:0] M_mux_pad_in;
    logic M_mux_pad_out;
    
    mux_2 mux_pad (
        .s0(M_mux_pad_s0),
        .in(M_mux_pad_in),
        .out(M_mux_pad_out)
    );
    
    
    localparam _MP_SIZE_1355449547 = 6'h20;
    logic [31:0] M_first_bit_reverse_in;
    logic [31:0] M_first_bit_reverse_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_1355449547)
    ) first_bit_reverse (
        .in(M_first_bit_reverse_in),
        .reversed(M_first_bit_reverse_reversed)
    );
    
    
    localparam _MP_SIZE_1165449225 = 6'h20;
    logic [31:0] M_second_bit_reverse_in;
    logic [31:0] M_second_bit_reverse_reversed;
    
    bit_reverse #(
        .SIZE(_MP_SIZE_1165449225)
    ) second_bit_reverse (
        .in(M_second_bit_reverse_in),
        .reversed(M_second_bit_reverse_reversed)
    );
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_108832781 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_left_shifters_a;
    logic [4:0] M_left_shifters_shift;
    logic [4:0] M_left_shifters_pad;
    logic [4:0][31:0] M_left_shifters_out;
    
    genvar idx_0_108832781;
    
    generate
        for (idx_0_108832781 = 0; idx_0_108832781 < 5; idx_0_108832781 = idx_0_108832781 + 1) begin: forLoop_idx_0_108832781
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_108832781[idx_0_108832781])
            ) left_shifters (
                .a(M_left_shifters_a[idx_0_108832781]),
                .shift(M_left_shifters_shift[idx_0_108832781]),
                .pad(M_left_shifters_pad[idx_0_108832781]),
                .out(M_left_shifters_out[idx_0_108832781])
            );
        end
    endgenerate
    
    
    always @* begin
        shift = 1'h0;
        M_first_bit_reverse_in = a;
        for (RR_39a84507_i = 0; RR_39a84507_i < 6'h20; RR_39a84507_i = RR_39a84507_i + 1) begin
      R_39a84507_i = (0) + RR_39a84507_i * (1);
            M_mux_a_s0[R_39a84507_i] = alufn[1'h0];
            M_mux_a_in[R_39a84507_i] = {M_first_bit_reverse_reversed[R_39a84507_i], a[R_39a84507_i]};
        end
        M_mux_pad_s0 = alufn[1'h1];
        M_mux_pad_in = {1'h0, a[5'h1f]};
        for (RR_38caf42b_i = 0; RR_38caf42b_i < 3'h5; RR_38caf42b_i = RR_38caf42b_i + 1) begin
      R_38caf42b_i = (0) + RR_38caf42b_i * (1);
            if (R_38caf42b_i == 1'h0) begin
                M_left_shifters_a[R_38caf42b_i] = M_mux_a_out;
            end else begin
                M_left_shifters_a[R_38caf42b_i] = M_left_shifters_out[R_38caf42b_i - 1'h1];
            end
            M_left_shifters_shift[R_38caf42b_i] = b[R_38caf42b_i];
            M_left_shifters_pad[R_38caf42b_i] = M_mux_pad_out;
        end
        M_second_bit_reverse_in = M_left_shifters_out[3'h4];
        for (RR_4ba91384_i = 0; RR_4ba91384_i < 6'h20; RR_4ba91384_i = RR_4ba91384_i + 1) begin
      R_4ba91384_i = (0) + RR_4ba91384_i * (1);
            M_mux_shl_s0[R_4ba91384_i] = alufn[1'h0];
            M_mux_shl_in[R_4ba91384_i][1'h0] = M_left_shifters_out[3'h4][R_4ba91384_i];
            M_mux_shl_in[R_4ba91384_i][1'h1] = M_second_bit_reverse_reversed[R_4ba91384_i];
        end
        shift = M_mux_shl_out;
    end
    
    
endmodule