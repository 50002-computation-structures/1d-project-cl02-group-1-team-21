/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_statement_tester #(
        parameter INPUT_A = 0,
        parameter INPUT_B = 0,
        parameter ALUCODE = 0,
        parameter EXPECTED = 0
    ) (
        input wire clk,
        input wire rst,
        input wire start,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [5:0] alucode_led,
        output reg [7:0] led,
        output reg done
    );
    localparam E_States_INIT = 4'h0;
    localparam E_States_DISP_A_1 = 4'h1;
    localparam E_States_DISP_A_2 = 4'h2;
    localparam E_States_DISP_B_1 = 4'h3;
    localparam E_States_DISP_B_2 = 4'h4;
    localparam E_States_DISP_O_1 = 4'h5;
    localparam E_States_DISP_O_2 = 4'h6;
    localparam E_States_DONE = 4'h7;
    localparam E_States_ERROR_1 = 4'h8;
    localparam E_States_ERROR_2 = 4'h9;
    localparam _MP_RISE_1603172047 = 1'h1;
    localparam _MP_FALL_1603172047 = 1'h0;
    logic M_slow_clock_edge_in;
    logic M_slow_clock_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1603172047),
        .FALL(_MP_FALL_1603172047)
    ) slow_clock_edge (
        .clk(clk),
        .in(M_slow_clock_edge_in),
        .out(M_slow_clock_edge_out)
    );
    
    
    logic [3:0] D_states_d, D_states_q = 4'h0;
    logic [31:0] D_o_d, D_o_q = 0;
    localparam _MP_SIZE_871875298 = 1'h1;
    localparam _MP_DIV_871875298 = 4'ha;
    localparam _MP_TOP_871875298 = 1'h0;
    localparam _MP_UP_871875298 = 1'h1;
    logic [0:0] M_slow_clock_value;
    
    counter #(
        .SIZE(_MP_SIZE_871875298),
        .DIV(_MP_DIV_871875298),
        .TOP(_MP_TOP_871875298),
        .UP(_MP_UP_871875298)
    ) slow_clock (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clock_value)
    );
    
    
    localparam _MP_DIGITS_117252212 = 3'h4;
    localparam _MP_DIV_117252212 = 5'h10;
    logic [3:0][3:0] M_seg_display_values;
    logic [6:0] M_seg_display_seg;
    logic [3:0] M_seg_display_sel;
    
    multi_seven_seg #(
        .DIGITS(_MP_DIGITS_117252212),
        .DIV(_MP_DIV_117252212)
    ) seg_display (
        .clk(clk),
        .rst(rst),
        .values(M_seg_display_values),
        .seg(M_seg_display_seg),
        .sel(M_seg_display_sel)
    );
    
    
    logic [5:0] alufn;
    logic [31:0] a;
    logic [31:0] b;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(a),
        .b(b),
        .alufn(alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    always @* begin
        D_o_d = D_o_q;
        D_states_d = D_states_q;
        
        done = 1'h0;
        M_slow_clock_edge_in = M_slow_clock_value;
        io_segment = 8'hff;
        io_select = 4'hf;
        M_seg_display_values = {{4'h0, 4'h0, 4'h0, 4'h0}};
        led = 8'h0;
        alufn = ALUCODE;
        a = INPUT_A;
        b = INPUT_B;
        D_o_d = M_alu_out;
        
        case (D_states_q)
            4'h0: begin
                if (start) begin
                    D_states_d = 4'h1;
                end
            end
            4'h1: begin
                io_segment = 8'h88;
                io_select = 4'he;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h2;
                end
            end
            4'h2: begin
                M_seg_display_values = {a[4'hf:4'hc], a[4'hb:4'h8], a[3'h7:3'h4], a[2'h3:1'h0]};
                io_segment = ~M_seg_display_seg;
                io_select = ~M_seg_display_sel;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h3;
                end
            end
            4'h3: begin
                io_segment = 8'h83;
                io_select = 4'he;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h4;
                end
            end
            4'h4: begin
                M_seg_display_values = {b[4'hf:4'hc], b[4'hb:4'h8], b[3'h7:3'h4], b[2'h3:1'h0]};
                io_segment = ~M_seg_display_seg;
                io_select = ~M_seg_display_sel;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h5;
                end
            end
            4'h5: begin
                io_segment = 8'hc0;
                io_select = 4'he;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h6;
                end
            end
            4'h6: begin
                M_seg_display_values = {D_o_q[4'hf:4'hc], D_o_q[4'hb:4'h8], D_o_q[3'h7:3'h4], D_o_q[2'h3:1'h0]};
                io_segment = ~M_seg_display_seg;
                io_select = ~M_seg_display_sel;
                if (M_slow_clock_edge_out && D_o_q == EXPECTED) begin
                    D_states_d = 4'h7;
                end else begin
                    if (M_slow_clock_edge_out && D_o_q != EXPECTED) begin
                        D_states_d = 4'h8;
                    end
                end
            end
            4'h7: begin
                io_segment = 8'ha1;
                io_select = 4'he;
                alucode_led = 6'h0;
                done = 1'h1;
            end
            4'h8: begin
                M_seg_display_values = {D_o_q[4'hf:4'hc], D_o_q[4'hb:4'h8], D_o_q[3'h7:3'h4], D_o_q[2'h3:1'h0]};
                io_segment = ~M_seg_display_seg;
                io_select = ~M_seg_display_sel;
                if (M_slow_clock_edge_out) begin
                    D_states_d = 4'h9;
                end
            end
            4'h9: begin
                io_segment = 8'h86;
                io_select = 4'he;
            end
        endcase
        alucode_led = ALUCODE;
        led[2'h2:1'h0] = {M_alu_n, M_alu_v, M_alu_z};
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_states_q <= 4'h0;
            D_o_q <= 0;
        end else begin
            D_states_q <= D_states_d;
            D_o_q <= D_o_d;
        end
    end
endmodule