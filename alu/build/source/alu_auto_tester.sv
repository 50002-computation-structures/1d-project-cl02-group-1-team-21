/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_auto_tester (
        input wire clk,
        input wire rst,
        input wire start,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [5:0] alucode_led,
        output reg [7:0] led
    );
    localparam E_AutoStates_STANDBY = 3'h0;
    localparam E_AutoStates_TEST_0 = 3'h1;
    localparam E_AutoStates_TEST_1 = 3'h2;
    localparam E_AutoStates_TEST_2 = 3'h3;
    localparam E_AutoStates_TEST_3 = 3'h4;
    localparam E_AutoStates_TEST_4 = 3'h5;
    localparam E_AutoStates_TEST_5 = 3'h6;
    logic [2:0] D_states_d, D_states_q = 3'h0;
    localparam _MP_INPUT_A_1677072157 = 32'habcd1234;
    localparam _MP_INPUT_B_1677072157 = 32'h1;
    localparam _MP_ALUCODE_1677072157 = 6'h4;
    localparam _MP_EXPECTED_1677072157 = 32'habcd1234;
    logic M_test_0_start;
    logic [7:0] M_test_0_io_segment;
    logic [3:0] M_test_0_io_select;
    logic [5:0] M_test_0_alucode_led;
    logic [7:0] M_test_0_led;
    logic M_test_0_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_1677072157),
        .INPUT_B(_MP_INPUT_B_1677072157),
        .ALUCODE(_MP_ALUCODE_1677072157),
        .EXPECTED(_MP_EXPECTED_1677072157)
    ) test_0 (
        .clk(clk),
        .rst(rst),
        .start(M_test_0_start),
        .io_segment(M_test_0_io_segment),
        .io_select(M_test_0_io_select),
        .alucode_led(M_test_0_alucode_led),
        .led(M_test_0_led),
        .done(M_test_0_done)
    );
    
    
    localparam _MP_INPUT_A_1188113129 = 32'habcd1234;
    localparam _MP_INPUT_B_1188113129 = 32'h2;
    localparam _MP_ALUCODE_1188113129 = 6'h4;
    localparam _MP_EXPECTED_1188113129 = 32'hd5e6891a;
    logic M_test_1_start;
    logic [7:0] M_test_1_io_segment;
    logic [3:0] M_test_1_io_select;
    logic [5:0] M_test_1_alucode_led;
    logic [7:0] M_test_1_led;
    logic M_test_1_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_1188113129),
        .INPUT_B(_MP_INPUT_B_1188113129),
        .ALUCODE(_MP_ALUCODE_1188113129),
        .EXPECTED(_MP_EXPECTED_1188113129)
    ) test_1 (
        .clk(clk),
        .rst(rst),
        .start(M_test_1_start),
        .io_segment(M_test_1_io_segment),
        .io_select(M_test_1_io_select),
        .alucode_led(M_test_1_alucode_led),
        .led(M_test_1_led),
        .done(M_test_1_done)
    );
    
    
    localparam _MP_INPUT_A_2139296630 = 32'h1234;
    localparam _MP_INPUT_B_2139296630 = 32'h5;
    localparam _MP_ALUCODE_2139296630 = 6'h4;
    localparam _MP_EXPECTED_2139296630 = 32'h3a4;
    logic M_test_2_start;
    logic [7:0] M_test_2_io_segment;
    logic [3:0] M_test_2_io_select;
    logic [5:0] M_test_2_alucode_led;
    logic [7:0] M_test_2_led;
    logic M_test_2_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_2139296630),
        .INPUT_B(_MP_INPUT_B_2139296630),
        .ALUCODE(_MP_ALUCODE_2139296630),
        .EXPECTED(_MP_EXPECTED_2139296630)
    ) test_2 (
        .clk(clk),
        .rst(rst),
        .start(M_test_2_start),
        .io_segment(M_test_2_io_segment),
        .io_select(M_test_2_io_select),
        .alucode_led(M_test_2_alucode_led),
        .led(M_test_2_led),
        .done(M_test_2_done)
    );
    
    
    localparam _MP_INPUT_A_406485383 = 32'h7ffffff2;
    localparam _MP_INPUT_B_406485383 = 32'h2;
    localparam _MP_ALUCODE_406485383 = 6'h4;
    localparam _MP_EXPECTED_406485383 = 32'h3ffffff9;
    logic M_test_3_start;
    logic [7:0] M_test_3_io_segment;
    logic [3:0] M_test_3_io_select;
    logic [5:0] M_test_3_alucode_led;
    logic [7:0] M_test_3_led;
    logic M_test_3_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_406485383),
        .INPUT_B(_MP_INPUT_B_406485383),
        .ALUCODE(_MP_ALUCODE_406485383),
        .EXPECTED(_MP_EXPECTED_406485383)
    ) test_3 (
        .clk(clk),
        .rst(rst),
        .start(M_test_3_start),
        .io_segment(M_test_3_io_segment),
        .io_select(M_test_3_io_select),
        .alucode_led(M_test_3_alucode_led),
        .led(M_test_3_led),
        .done(M_test_3_done)
    );
    
    
    localparam _MP_INPUT_A_1097164573 = 32'h80000000;
    localparam _MP_INPUT_B_1097164573 = 32'h2;
    localparam _MP_ALUCODE_1097164573 = 6'h4;
    localparam _MP_EXPECTED_1097164573 = 32'hc0000000;
    logic M_test_4_start;
    logic [7:0] M_test_4_io_segment;
    logic [3:0] M_test_4_io_select;
    logic [5:0] M_test_4_alucode_led;
    logic [7:0] M_test_4_led;
    logic M_test_4_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_1097164573),
        .INPUT_B(_MP_INPUT_B_1097164573),
        .ALUCODE(_MP_ALUCODE_1097164573),
        .EXPECTED(_MP_EXPECTED_1097164573)
    ) test_4 (
        .clk(clk),
        .rst(rst),
        .start(M_test_4_start),
        .io_segment(M_test_4_io_segment),
        .io_select(M_test_4_io_select),
        .alucode_led(M_test_4_alucode_led),
        .led(M_test_4_led),
        .done(M_test_4_done)
    );
    
    
    localparam _MP_INPUT_A_46555090 = 32'h0;
    localparam _MP_INPUT_B_46555090 = 32'h12345678;
    localparam _MP_ALUCODE_46555090 = 6'h4;
    localparam _MP_EXPECTED_46555090 = 32'h0;
    logic M_test_5_start;
    logic [7:0] M_test_5_io_segment;
    logic [3:0] M_test_5_io_select;
    logic [5:0] M_test_5_alucode_led;
    logic [7:0] M_test_5_led;
    logic M_test_5_done;
    
    alu_statement_tester #(
        .INPUT_A(_MP_INPUT_A_46555090),
        .INPUT_B(_MP_INPUT_B_46555090),
        .ALUCODE(_MP_ALUCODE_46555090),
        .EXPECTED(_MP_EXPECTED_46555090)
    ) test_5 (
        .clk(clk),
        .rst(rst),
        .start(M_test_5_start),
        .io_segment(M_test_5_io_segment),
        .io_select(M_test_5_io_select),
        .alucode_led(M_test_5_alucode_led),
        .led(M_test_5_led),
        .done(M_test_5_done)
    );
    
    
    always @* begin
        D_states_d = D_states_q;
        
        io_segment = 8'hff;
        io_select = 4'hf;
        alucode_led = 6'h0;
        led = 8'h0;
        M_test_0_start = 1'h0;
        M_test_1_start = 1'h0;
        M_test_2_start = 1'h0;
        M_test_3_start = 1'h0;
        M_test_4_start = 1'h0;
        M_test_5_start = 1'h0;
        
        case (D_states_q)
            3'h0: begin
                if (start) begin
                    D_states_d = 3'h1;
                end
            end
            3'h1: begin
                io_segment = M_test_0_io_segment;
                io_select = M_test_0_io_select;
                alucode_led = M_test_0_alucode_led;
                led = M_test_0_led;
                led[3'h7:2'h3] = 5'h0;
                M_test_0_start = 1'h1;
                if (M_test_0_done) begin
                    D_states_d = 3'h2;
                end
            end
            3'h2: begin
                io_segment = M_test_1_io_segment;
                io_select = M_test_1_io_select;
                alucode_led = M_test_1_alucode_led;
                led = M_test_1_led;
                led[3'h7:2'h3] = 5'h1;
                M_test_1_start = 1'h1;
                if (M_test_1_done) begin
                    D_states_d = 3'h0;
                end
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_states_q <= 3'h0;
        end else begin
            D_states_q <= D_states_d;
        end
    end
endmodule