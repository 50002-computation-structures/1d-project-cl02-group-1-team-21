/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    logic [31:0] R_098d08e0_i;
    logic [31:0] RR_098d08e0_i;
    logic [31:0] R_76a371fb_i;
    logic [31:0] RR_76a371fb_i;
    logic [31:0] M_alu_mux_s0;
    logic [31:0] M_alu_mux_s1;
    logic [31:0][3:0] M_alu_mux_in;
    logic [31:0] M_alu_mux_out;
    
    genvar idx_0_2131688764;
    
    generate
        for (idx_0_2131688764 = 0; idx_0_2131688764 < 32; idx_0_2131688764 = idx_0_2131688764 + 1) begin: forLoop_idx_0_2131688764
            mux_4 alu_mux (
                .s0(M_alu_mux_s0[idx_0_2131688764]),
                .s1(M_alu_mux_s1[idx_0_2131688764]),
                .in(M_alu_mux_in[idx_0_2131688764]),
                .out(M_alu_mux_out[idx_0_2131688764])
            );
        end
    endgenerate
    
    
    logic [31:0] M_arith_mux_s0;
    logic [31:0] M_arith_mux_s1;
    logic [31:0][3:0] M_arith_mux_in;
    logic [31:0] M_arith_mux_out;
    
    genvar idx_0_1580019156;
    
    generate
        for (idx_0_1580019156 = 0; idx_0_1580019156 < 32; idx_0_1580019156 = idx_0_1580019156 + 1) begin: forLoop_idx_0_1580019156
            mux_4 arith_mux (
                .s0(M_arith_mux_s0[idx_0_1580019156]),
                .s1(M_arith_mux_s1[idx_0_1580019156]),
                .in(M_arith_mux_in[idx_0_1580019156]),
                .out(M_arith_mux_out[idx_0_1580019156])
            );
        end
    endgenerate
    
    
    localparam _MP_SIZE_1063644195 = 6'h20;
    logic [31:0] M_adder_a;
    logic [31:0] M_adder_b;
    logic [5:0] M_adder_alufn_signal;
    logic [31:0] M_adder_out;
    logic M_adder_z;
    logic M_adder_v;
    logic M_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_1063644195)
    ) adder (
        .a(M_adder_a),
        .b(M_adder_b),
        .alufn_signal(M_adder_alufn_signal),
        .out(M_adder_out),
        .z(M_adder_z),
        .v(M_adder_v),
        .n(M_adder_n)
    );
    
    
    logic [31:0] M_multiplier_a;
    logic [31:0] M_multiplier_b;
    logic [31:0] M_multiplier_mul;
    
    multiplier multiplier (
        .a(M_multiplier_a),
        .b(M_multiplier_b),
        .mul(M_multiplier_mul)
    );
    
    
    logic [31:0] M_division_a;
    logic [31:0] M_division_b;
    logic [31:0] M_division_out;
    
    division division (
        .a(M_division_a),
        .b(M_division_b),
        .out(M_division_out)
    );
    
    
    logic [31:0] M_modulo_a;
    logic [31:0] M_modulo_b;
    logic [31:0] M_modulo_out;
    
    modulo modulo (
        .a(M_modulo_a),
        .b(M_modulo_b),
        .out(M_modulo_out)
    );
    
    
    localparam _MP_SIZE_411170139 = 6'h20;
    logic [31:0] M_boolean_a;
    logic [31:0] M_boolean_b;
    logic [5:0] M_boolean_alufn;
    logic [31:0] M_boolean_bool;
    
    boolean #(
        .SIZE(_MP_SIZE_411170139)
    ) boolean (
        .a(M_boolean_a),
        .b(M_boolean_b),
        .alufn(M_boolean_alufn),
        .bool(M_boolean_bool)
    );
    
    
    logic [31:0] M_shifter_a;
    logic [4:0] M_shifter_b;
    logic [5:0] M_shifter_alufn;
    logic [31:0] M_shifter_shift;
    
    shifter shifter (
        .a(M_shifter_a),
        .b(M_shifter_b),
        .alufn(M_shifter_alufn),
        .shift(M_shifter_shift)
    );
    
    
    logic M_compare_z;
    logic M_compare_v;
    logic M_compare_n;
    logic [5:0] M_compare_alufn;
    logic M_compare_cmp;
    
    compare compare (
        .z(M_compare_z),
        .v(M_compare_v),
        .n(M_compare_n),
        .alufn(M_compare_alufn),
        .cmp(M_compare_cmp)
    );
    
    
    localparam _MP_SIZE_1386758220 = 6'h20;
    logic [31:0] M_cmp_adder_a;
    logic [31:0] M_cmp_adder_b;
    logic [5:0] M_cmp_adder_alufn_signal;
    logic [31:0] M_cmp_adder_out;
    logic M_cmp_adder_z;
    logic M_cmp_adder_v;
    logic M_cmp_adder_n;
    
    adder #(
        .SIZE(_MP_SIZE_1386758220)
    ) cmp_adder (
        .a(M_cmp_adder_a),
        .b(M_cmp_adder_b),
        .alufn_signal(M_cmp_adder_alufn_signal),
        .out(M_cmp_adder_out),
        .z(M_cmp_adder_z),
        .v(M_cmp_adder_v),
        .n(M_cmp_adder_n)
    );
    
    
    always @* begin
        M_adder_a = a;
        M_adder_b = b;
        M_adder_alufn_signal = alufn;
        M_multiplier_a = a;
        M_multiplier_b = b;
        M_modulo_a = a;
        M_modulo_b = b;
        M_division_a = a;
        M_division_b = b;
        for (RR_098d08e0_i = 0; RR_098d08e0_i < 6'h20; RR_098d08e0_i = RR_098d08e0_i + 1) begin
      R_098d08e0_i = (0) + RR_098d08e0_i * (1);
            M_arith_mux_s0[R_098d08e0_i] = alufn[1'h1];
            M_arith_mux_s1[R_098d08e0_i] = alufn[2'h2];
            M_arith_mux_in[R_098d08e0_i][1'h0] = M_adder_out[R_098d08e0_i];
            M_arith_mux_in[R_098d08e0_i][1'h1] = M_multiplier_mul[R_098d08e0_i];
            M_arith_mux_in[R_098d08e0_i][2'h2] = M_division_out[R_098d08e0_i];
            M_arith_mux_in[R_098d08e0_i][2'h3] = M_modulo_out[R_098d08e0_i];
        end
        M_boolean_a = a;
        M_boolean_b = b;
        M_boolean_alufn = alufn;
        M_shifter_a = a;
        M_shifter_b = b;
        M_shifter_alufn = alufn;
        M_cmp_adder_a = a;
        M_cmp_adder_b = b;
        M_cmp_adder_alufn_signal = 6'h1;
        M_compare_z = M_cmp_adder_z;
        M_compare_v = M_cmp_adder_v;
        M_compare_n = M_cmp_adder_n;
        M_compare_alufn = alufn;
        for (RR_76a371fb_i = 0; RR_76a371fb_i < 6'h20; RR_76a371fb_i = RR_76a371fb_i + 1) begin
      R_76a371fb_i = (0) + RR_76a371fb_i * (1);
            M_alu_mux_s0[R_76a371fb_i] = alufn[3'h4];
            M_alu_mux_s1[R_76a371fb_i] = alufn[3'h5];
            M_alu_mux_in[R_76a371fb_i][1'h0] = M_arith_mux_out[R_76a371fb_i];
            M_alu_mux_in[R_76a371fb_i][1'h1] = M_boolean_bool[R_76a371fb_i];
            M_alu_mux_in[R_76a371fb_i][2'h2] = M_shifter_shift[R_76a371fb_i];
            if (~(|R_76a371fb_i)) begin
                M_alu_mux_in[R_76a371fb_i][2'h3] = M_compare_cmp;
            end else begin
                M_alu_mux_in[R_76a371fb_i][2'h3] = 1'h0;
            end
        end
        out = M_alu_mux_out;
        z = M_adder_z;
        v = M_adder_v;
        n = M_adder_n;
    end
    
    
endmodule