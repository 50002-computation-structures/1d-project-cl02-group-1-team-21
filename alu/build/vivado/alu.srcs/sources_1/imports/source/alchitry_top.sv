/*
    This file was generated automatically by Alchitry Labs 2.0.29-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip
    );
    logic rst;
    logic state_change;
    localparam CLK_FREQ = 24'h989680;
    localparam E_States_MANUAL = 1'h0;
    localparam E_States_AUTO = 1'h1;
    localparam _MP_STAGES_1903582962 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1903582962)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_CLK_FREQ_1805484839 = 24'h989680;
    localparam _MP_MIN_DELAY_1805484839 = 5'h14;
    localparam _MP_NUM_SYNC_1805484839 = 2'h2;
    logic M_button_cond_in;
    logic M_button_cond_out;
    
    button_conditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1805484839),
        .MIN_DELAY(_MP_MIN_DELAY_1805484839),
        .NUM_SYNC(_MP_NUM_SYNC_1805484839)
    ) button_cond (
        .clk(clk),
        .in(M_button_cond_in),
        .out(M_button_cond_out)
    );
    
    
    localparam _MP_RISE_1022147684 = 1'h1;
    localparam _MP_FALL_1022147684 = 1'h0;
    logic M_edge_in;
    logic M_edge_out;
    
    edge_detector #(
        .RISE(_MP_RISE_1022147684),
        .FALL(_MP_FALL_1022147684)
    ) L_edge (
        .clk(clk),
        .in(M_edge_in),
        .out(M_edge_out)
    );
    
    
    logic D_start_auto_test_d, D_start_auto_test_q = 0;
    logic [0:0] D_states_d, D_states_q = 1'h0;
    localparam _MP_CLK_FREQ_1043882944 = 24'h989680;
    logic [2:0][7:0] M_alu_manual_io_led;
    logic [7:0] M_alu_manual_io_segment;
    logic [3:0] M_alu_manual_io_select;
    logic [7:0] M_alu_manual_led;
    
    alu_manual_tester #(
        .CLK_FREQ(_MP_CLK_FREQ_1043882944)
    ) alu_manual (
        .io_button(io_button),
        .io_dip(io_dip),
        .clk(clk),
        .rst(rst),
        .io_led(M_alu_manual_io_led),
        .io_segment(M_alu_manual_io_segment),
        .io_select(M_alu_manual_io_select),
        .led(M_alu_manual_led)
    );
    
    
    logic [7:0] M_alu_auto_io_segment;
    logic [3:0] M_alu_auto_io_select;
    logic [5:0] M_alu_auto_alucode_led;
    logic [7:0] M_alu_auto_led;
    
    alu_auto_tester alu_auto (
        .start(D_start_auto_test_q),
        .clk(clk),
        .rst(rst),
        .io_segment(M_alu_auto_io_segment),
        .io_select(M_alu_auto_io_select),
        .alucode_led(M_alu_auto_alucode_led),
        .led(M_alu_auto_led)
    );
    
    
    logic M_my_blinker_blink;
    
    blinker my_blinker (
        .clk(clk),
        .rst(rst),
        .blink(M_my_blinker_blink)
    );
    
    
    always @* begin
        D_start_auto_test_d = D_start_auto_test_q;
        D_states_d = D_states_q;
        
        led = {4'h8{M_my_blinker_blink}};
        usb_tx = usb_rx;
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        D_start_auto_test_d = D_start_auto_test_q;
        M_button_cond_in = io_button[1'h1];
        M_edge_in = M_button_cond_out;
        state_change = M_edge_out;
        io_led = {{8'h0, 8'h0, 8'h0}};
        io_segment = 1'h0;
        io_select = 4'hf;
        
        case (D_states_q)
            1'h0: begin
                io_led = M_alu_manual_io_led;
                io_segment = M_alu_manual_io_segment;
                io_select = M_alu_manual_io_select;
                led = M_alu_manual_led;
                if (state_change) begin
                    D_states_d = 1'h1;
                end
            end
            1'h1: begin
                D_start_auto_test_d = 1'h1;
                io_segment = M_alu_auto_io_segment;
                io_select = M_alu_auto_io_select;
                led = M_alu_auto_led;
                io_led[2'h2][3'h5:1'h0] = M_alu_auto_alucode_led;
                if (state_change) begin
                    D_states_d = 1'h0;
                end
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_start_auto_test_q <= 0;
            D_states_q <= 1'h0;
        end else begin
            D_start_auto_test_q <= D_start_auto_test_d;
            D_states_q <= D_states_d;
        end
    end
endmodule